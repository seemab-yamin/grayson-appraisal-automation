import pandas as pd
import requests
import zipfile
import logging
import os, json

# Global temporary directory - create in current working directory
TEMP_DIR = os.path.join(os.getcwd(), "tmp")
os.makedirs(TEMP_DIR, exist_ok=True)


def download_zip_file(url, save_path=None):
    """
    Downloads a zip file from the given URL and saves it to the specified path.
    Returns the path to the downloaded zip file.
    """
    logger = logging.getLogger(__name__)

    if save_path is None:
        save_path = os.path.join(TEMP_DIR, "downloaded.zip")

    try:
        logger.info(f"Starting download from URL: {url}")

        # Download the zip file
        logger.info("Initiating HTTP request to download zip file...")
        response = requests.get(url, timeout=30)
        response.raise_for_status()

        file_size = len(response.content)
        file_size_mb = file_size / (1024 * 1024)
        logger.info(f"Successfully downloaded {file_size_mb:,} MB from server")

        # Save the zip file
        logger.info(f"Saving zip file to: {save_path}")
        with open(save_path, "wb") as f:
            f.write(response.content)
        logger.info("Zip file saved successfully")
        return save_path

    except requests.RequestException as e:
        logger.error(f"HTTP request failed: {str(e)}")
        raise Exception(f"Failed to download file: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error during download: {str(e)}", exc_info=True)
        raise Exception(f"Error downloading zip file: {str(e)}")


def extract_zip_file(zip_path, extracted_dir=None, cleanup=True):
    """
    Extracts a zip file to the specified directory.
    Returns the path to the directory containing the extracted files.
    """
    logger = logging.getLogger(__name__)

    if extracted_dir is None:
        extracted_dir = os.path.join(TEMP_DIR, "uncompressed")

    try:
        logger.info(f"Extracting zip file from: {zip_path}")
        logger.info(f"Using extraction directory: {extracted_dir}")

        # Extract the zip file
        logger.info("Extracting zip file contents...")
        with zipfile.ZipFile(zip_path, "r") as zip_ref:
            file_list = zip_ref.namelist()
            logger.info(f"Zip contains {len(file_list)} files")
            logger.debug(f"Files in archive: {file_list}")
            zip_ref.extractall(extracted_dir)

        # Remove the zip file after extraction if cleanup is requested
        if cleanup:
            os.remove(zip_path)
            logger.info("Cleaned up downloaded zip file")

        logger.info(f"Successfully extracted zip contents to: {extracted_dir}")
        return extracted_dir

    except zipfile.BadZipFile as e:
        logger.error(f"Invalid zip file format: {str(e)}")
        raise Exception(f"Invalid zip file: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error during extraction: {str(e)}", exc_info=True)
        raise Exception(f"Error extracting zip file: {str(e)}")


def get_columns():
    columns = [
        "prop_id",
        "prop_type_cd",
        "prop_val_yr",
        "sup_num",
        "sup_action",
        "sup_cd",
        "sup_desc",
        "geo_id",
        "py_owner_id",
        "py_owner_name",
        "partial_owner",
        "udi_group",
        "filler",
        "py_addr_line1",
        "py_addr_line2",
        "py_addr_line3",
        "py_addr_city",
        "py_addr_state",
        "py_addr_country",
        "py_addr_zip",
        "py_addr_zip_cass",
        "py_addr_zip_rt",
        "py_confidential_flag",
        "py_address_suppress_flag",
        "filler",
        "py_addr_ml_deliverable",
        "filler",
        "situs_street_prefx",
        "situs_street",
        "situs_street_suffix",
        "situs_city",
        "situs_zip",
        "legal_desc",
        "legal_desc2",
        "legal_acreage",
        "abs_subdv_cd",
        "hood_cd",
        "block",
        "tract_or_lot",
        "land_hstd_val",
        "land_non_hstd_val",
        "imprv_hstd_val",
        "imprv_non_hstd_val",
        "ag_use_val",
        "ag_market",
        "timber_use",
        "timber_market",
        "appraised_val",
        "ten_percent_cap",
        "assessed_val",
        "filler",
        "arb_protest_flag",
        "filler",
        "deed_book_id",
        "deed_book_page",
        "deed_dt",
        "mortgage_co_id",
        "mortage_co_name",
        "mortgage_acct_id",
        "jan1_owner_id",
        "jan1_owner_name",
        "jan1_addr_line1",
        "jan1_addr_line2",
        "jan1_addr_line3",
        "jan1_addr_city",
        "jan1_addr_state",
        "jan1_addr_country",
        "jan1_addr_zip",
        "jan1_addr_zip_cass",
        "jan1_addr_zip_rt",
        "jan1_confidential_flag",
        "jan1_address_suppress_flag",
        "filler",
        "jan1_ml_deliverable",
        "hs_exempt",
        "ov65_exempt",
        "ov65_prorate_begin",
        "ov65_prorate_end",
        "ov65s_exempt",
        "dp_exempt",
        "dv1_exempt",
        "dv1s_exempt",
        "dv2_exempt",
        "dv2s_exempt",
        "dv3_exempt",
        "dv3s_exempt",
        "dv4_exempt",
        "dv4s_exempt",
        "ex_exempt",
        "ex_prorate_begin",
        "ex_prorate_end",
        "lve_exempt",
        "ab_exempt",
        "en_exempt",
        "fr_exempt",
        "ht_exempt",
        "pro_exempt",
        "pc_exempt",
        "so_exempt",
        "ex366_exempt",
        "ch_exempt",
        "imprv_state_cd",
        "land_state_cd",
        "personal_state_cd",
        "mineral_state_cd",
        "land_acres",
        "entity_agent_id",
        "entity_agent_name",
        "entity_agent_addr_line1",
        "entity_agent_addr_line2",
        "entity_agent_addr_line3",
        "entity_agent_city",
        "entity_agent_state",
        "entity_agent_country",
        "entity_agent_zip",
        "entity_agent_cass",
        "entity_agent_rt",
        "filler",
        "ca_agent_id",
        "ca_agent_name",
        "ca_agent_addr_line1",
        "ca_agent_addr_line2",
        "ca_agent_addr_line3",
        "ca_agent_city",
        "ca_agent_state",
        "ca_agent_country",
        "ca_agent_zip",
        "ca_agent_zip_cass",
        "ca_agent_zip_rt",
        "filler",
        "arb_agent_id",
        "arb_agent_name",
        "arb_agent_addr_line1",
        "arb_agent_addr_line2",
        "arb_agent_addr_line3",
        "arb_agent_city",
        "arb_agent_state",
        "arb_agent_country",
        "arb_agent_zip",
        "arb_agent_zip_cass",
        "arb_agent_zip_rt",
        "filler",
        "mineral_type_of_int",
        "mineral_int_pct",
        "productivity_use_code",
        "filler",
        "timber_78_market",
        "ag_late_loss",
        "late_freeport_penalty",
        "filler",
        "filler",
        "filler",
        "dba",
        "filler",
        "market_value",
        "filler",
        "filler",
        "filler",
        "filler",
        "filler",
        "filler",
        "filler",
        "filler",
        "ref_id1",
        "ref_id2",
        "situs_num",
        "situs_unit",
        "appr_owner_id",
        "appr_owner_name",
        "appr_addr_line1",
        "appr_addr_line2",
        "appr_addr_line3",
        "appr_addr_city",
        "appr_addr_state",
        "appr_addr_country",
        "appr_addr_zip",
        "appr_addr_zip_cass",
        "appr_addr_zip_cass_route",
        "appr_ml_deliverable",
        "appr_confidential_flag",
        "appr_address_suppress_flag",
        "appr_confidential_name",
        "py_confidential_name",
        "jan1_confidential_name",
        "filler",
        "rendition_filed",
        "rendition_date",
        "rendition_penalty",
        "rendition_penalty_date_paid",
        "rendition_fraud_penalty",
        "rendition_fraud_penalty_date_paid",
        "filler",
        "entities",
        "eco_exempt",
        "dataset_id",
        "deed_num",
        "chodo_exempt",
        "local_option_pct_only_flag_hs",
        "local_option_pct_only_flag_ov65",
        "local_option_pct_only_flag_ov65s",
        "local_option_pct_only_flag_dp",
        "freeze_only_flag_ov65",
        "freeze_only_flag_ov65s",
        "freeze_only_flag_dp",
        "apply_percent_exemption_flag",
        "exemption_percentage",
        "vit_flag",
        "lih_exempt",
        "git_exempt",
        "dps_exempt",
        "filler",
        "local_option_pct_only_flag_dps",
        "freeze_only_flag_dps",
        "dvhs_exempt",
        "hs_qualify_yr",
        "ov65_qualify_yr",
        "ov65s_qualify_yr",
        "dp_qualify_yr",
        "dps_qualify_yr",
        "dv1_qualify_yr",
        "dv1s_qualify_yr",
        "dv2_qualify_yr",
        "dv2s_qualify_yr",
        "dv3_qualify_yr",
        "dv3s_qualify_yr",
        "dv4_qualify_yr",
        "dv4s_qualify_yr",
        "dvhs_qualify_yr",
        "ex_qualify_yr",
        "ab_qualify_yr",
        "en_qualify_yr",
        "fr_qualify_yr",
        "ht_qualify_yr",
        "pro_qualify_yr",
        "pc_qualify_yr",
        "so_qualify_yr",
        "ex366_qualify_yr",
        "ch_qualify_yr",
        "eco_qualify_yr",
        "chodo_qualify_yr",
        "lih_qualify_yr",
        "git_qualify_yr",
        "mortgage_addr_line1",
        "mortgage_addr_line2",
        "mortgage_addr_line3",
        "mortgage_addr_city",
        "mortgage_addr_state",
        "mortgage_addr_country",
        "mortgage_addr_zip",
        "mortgage_addr_zip_cass",
        "mortgage_addr_zip_rt",
        "mortgage_addr_ml_deliverable",
        "sic_code",
        "omitted_property_flag",
        "hs_prorate_begin",
        "hs_prorate_end",
        "ov65s_prorate_begin",
        "ov65s_prorate_end",
        "dp_prorate_begin",
        "dp_prorate_end",
        "dv1_prorate_begin",
        "dv1_prorate_end",
        "dv1s_prorate_begin",
        "dv1s_prorate_end",
        "dv2_prorate_begin",
        "dv2_prorate_end",
        "dv2s_prorate_begin",
        "dv2s_prorate_end",
        "dv3_prorate_begin",
        "dv3_prorate_end",
        "dv3s_prorate_begin",
        "dv3s_prorate_end",
        "dv4_prorate_begin",
        "dv4_prorate_end",
        "dv4s_prorate_begin",
        "dv4s_prorate_end",
        "lve_prorate_begin",
        "lve_prorate_end",
        "ab_prorate_begin",
        "ab_prorate_end",
        "en_prorate_begin",
        "en_prorate_end",
        "fr_prorate_begin",
        "fr_prorate_end",
        "ht_prorate_begin",
        "ht_prorate_end",
        "pro_prorate_begin",
        "pro_prorate_end",
        "pc_prorate_begin",
        "pc_prorate_end",
        "so_prorate_begin",
        "so_prorate_end",
        "ex366_prorate_begin",
        "ex366_prorate_end",
        "ch_prorate_begin",
        "ch_prorate_end",
        "dps_prorate_begin",
        "dps_prorate_end",
        "eco_prorate_begin",
        "eco_prorate_end",
        "chodo_prorate_begin",
        "chodo_prorate_end",
        "lih_prorate_begin",
        "lih_prorate_end",
        "git_prorate_begin",
        "git_prorate_end",
        "clt_exempt",
        "clt_prorate_begin",
        "clt_prorate_end",
        "clt_qualify_yr",
        "dvhss_exempt",
        "dvhss_prorate_begin",
        "dvhss_prorate_end",
        "dvhss_qualify_yr",
        "omitted_imprv_hstd_val",
        "omitted_imprv_non_hstd_val",
        "dvhs_prorate_begin",
        "dvhs_prorate_end",
        "ex_xd_exempt",
        "ex_xd_qualify_yr",
        "ex_xd_prorate_begin",
        "ex_xd_prorate_end",
        "ex_xf_exempt",
        "ex_xf_qualify_yr",
        "ex_xf_prorate_begin",
        "ex_xf_prorate_end",
        "ex_xg_exempt",
        "ex_xg_qualify_yr",
        "ex_xg_prorate_begin",
        "ex_xg_prorate_end",
        "ex_xh_exempt",
        "ex_xh_qualify_yr",
        "ex_xh_prorate_begin",
        "ex_xh_prorate_end",
        "ex_xi_exempt",
        "ex_xi_qualify_yr",
        "ex_xi_prorate_begin",
        "ex_xi_prorate_end",
        "ex_xj_exempt",
        "ex_xj_qualify_yr",
        "ex_xj_prorate_begin",
        "ex_xj_prorate_end",
        "ex_xl_exempt",
        "ex_xl_qualify_yr",
        "ex_xl_prorate_begin",
        "ex_xl_prorate_end",
        "ex_xm_exempt",
        "ex_xm_qualify_yr",
        "ex_xm_prorate_begin",
        "ex_xm_prorate_end",
        "ex_xn_exempt",
        "ex_xn_qualify_yr",
        "ex_xn_prorate_begin",
        "ex_xn_prorate_end",
        "ex_xo_exempt",
        "ex_xo_qualify_yr",
        "ex_xo_prorate_begin",
        "ex_xo_prorate_end",
        "ex_xp_exempt",
        "ex_xp_qualify_yr",
        "ex_xp_prorate_begin",
        "ex_xp_prorate_end",
        "ex_xq_exempt",
        "ex_xq_qualify_yr",
        "ex_xq_prorate_begin",
        "ex_xq_prorate_end",
        "ex_xr_exempt",
        "ex_xr_qualify_yr",
        "ex_xr_prorate_begin",
        "ex_xr_prorate_end",
        "ex_xs_exempt",
        "ex_xs_qualify_yr",
        "ex_xs_prorate_begin",
        "ex_xs_prorate_end",
        "ex_xt_exempt",
        "ex_xt_qualify_yr",
        "ex_xt_prorate_begin",
        "ex_xt_prorate_end",
        "ex_xu_exempt",
        "ex_xu_qualify_yr",
        "ex_xu_prorate_begin",
        "ex_xu_prorate_end",
        "ex_xv_exempt",
        "ex_xv_qualify_yr",
        "ex_xv_prorate_begin",
        "ex_xv_prorate_end",
        "ex_xa_exempt",
        "ex_xa_qualify_yr",
        "ex_xa_prorate_begin",
        "ex_xa_prorate_end",
        "lve_qualify_yr",
        "ppv_exempt",
        "ppv_qualify_yr",
        "ppv_prorate_begin",
        "ppv_prorate_end",
        "dvch_exempt",
        "dvch_qualify_yr",
        "dvch_prorate_begin",
        "dvch_prorate_end",
        "dvchs_exempt",
        "dvchs_qualify_yr",
        "dvchs_prorate_begin",
        "dvchs_prorate_end",
        "masss_exempt",
        "masss_qualify_yr",
        "masss_prorate_begin",
        "masss_prorate_end",
        "pp_late_interstate_allocation_val",
        "appraised_val_reflecting_productivity_loss",
        "assessed_val_reflecting_productivity_loss",
        "frss_exempt",
        "frss_qualify_yr",
        "frss_prorate_begin",
        "frss_prorate_end",
        "abmno_exempt",
        "abmno_qualify_yr",
        "abmno_prorate_begin",
        "abmno_prorate_end",
        "filler",
        "filler",
        "filler",
        "filler",
        "filler",
        "filler",
        "filler",
        "filler",
        "dstr_exempt",
        "dstr_qualify_yr",
        "dstr_prorate_begin",
        "dstr_prorate_end",
        "late_correction_val",
        "dstrs_exempt",
        "dstrs_qualify_yr",
        "dstrs_prorate_begin",
        "dstrs_prorate_end",
        "nhs_cap_loss",
        "ccf_exempt",
        "ccf_qualify_yr",
        "ccf_prorate_begin",
        "ccf_prorate_end",
        "med_exempt",
        "med_qualify_yr",
        "med_prorate_begin",
        "med_prorate_end",
        "jeti_exempt",
        "jeti_qualify_yr",
        "jeti_prorate_begin",
        "jeti_prorate_end",
    ]
    # rename columns for duplicate ones
    new_columns = []
    for i, col in enumerate(columns):
        if col in new_columns:
            _id = 1
            while True:
                new_col = f"{col}_{_id}"
                if new_col not in new_columns:
                    new_columns.append(new_col)
                    break
                _id += 1
        else:
            new_columns.append(col)

        widths = [
            12,
            5,
            5,
            12,
            2,
            10,
            500,
            50,
            12,
            70,
            1,
            12,
            2,
            60,
            60,
            60,
            50,
            50,
            5,
            5,
            4,
            2,
            1,
            1,
            20,
            1,
            27,
            10,
            50,
            10,
            30,
            10,
            255,
            255,
            16,
            10,
            10,
            50,
            50,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            20,
            1,
            12,
            20,
            20,
            25,
            12,
            70,
            50,
            12,
            70,
            60,
            60,
            60,
            50,
            50,
            5,
            5,
            4,
            2,
            1,
            1,
            37,
            1,
            1,
            1,
            25,
            25,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            25,
            25,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            10,
            10,
            10,
            10,
            20,
            12,
            70,
            60,
            60,
            60,
            50,
            50,
            5,
            5,
            4,
            2,
            34,
            12,
            70,
            60,
            60,
            60,
            50,
            50,
            5,
            5,
            4,
            2,
            34,
            12,
            70,
            60,
            60,
            60,
            50,
            50,
            5,
            5,
            4,
            2,
            34,
            5,
            15,
            3,
            40,
            12,
            12,
            12,
            2,
            5,
            2,
            40,
            38,
            14,
            20,
            20,
            20,
            1,
            1,
            70,
            25,
            25,
            25,
            25,
            15,
            5,
            12,
            70,
            60,
            60,
            60,
            50,
            50,
            5,
            5,
            4,
            2,
            1,
            1,
            1,
            70,
            70,
            70,
            5,
            1,
            25,
            15,
            25,
            15,
            25,
            20,
            140,
            1,
            15,
            50,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            15,
            1,
            1,
            1,
            1,
            25,
            1,
            1,
            1,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            60,
            60,
            60,
            50,
            50,
            5,
            5,
            4,
            2,
            1,
            10,
            1,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            1,
            25,
            25,
            4,
            1,
            25,
            25,
            4,
            15,
            15,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            4,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            15,
            15,
            15,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            1,
            4,
            25,
            25,
            15,
            1,
            4,
            25,
            25,
            15,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
            1,
            4,
            25,
            25,
        ]
    return new_columns, widths


def generate_excel(input_file_path, output_excel_path, chunk_size):

    logger = logging.getLogger(__name__)
    new_columns, widths = get_columns()
    try:
        start_rows = 0
        logger.info(f"Reading dataset from file: {input_file_path}")

        reader = pd.read_fwf(
            input_file_path,
            header=None,
            encoding="latin-1",
            widths=widths,
            names=new_columns,
            chunksize=chunk_size,
        )

        for chunk_df in reader:
            # Process the chunk here
            logger.info(f"Starting row {start_rows}")
            # implement mapping logic here
            with open("mappings.json", "r") as f:
                mappings = json.load(f)
            for key, mapping in mappings.items():
                for col in chunk_df.columns:
                    if key in col:
                        chunk_df[col] = chunk_df[col].map(mapping).fillna(chunk_df[col])
            if os.path.exists(output_excel_path):
                # File exists, append to it
                with pd.ExcelWriter(
                    output_excel_path, mode="a", if_sheet_exists="overlay"
                ) as writer:
                    chunk_df.to_excel(
                        writer,
                        startrow=start_rows,
                        index=False,
                        header=False,
                    )
                msg = f"Excel file generated at: {output_excel_path}"
                logger.info(msg)
            else:
                # File doesn't exist, create new one
                chunk_df.to_excel(output_excel_path, index=False)
            start_rows += chunk_size
    except Exception as e:
        logger.error(f"Error reading dataset: {str(e)}", exc_info=True)
        raise Exception(f"Error reading dataset from file: {str(e)}")
    return output_excel_path
